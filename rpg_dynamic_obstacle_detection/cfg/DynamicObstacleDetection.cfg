#!/usr/bin/env python
PACKAGE = "rpg_dynamic_obstacle_detection"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("rectangle_ratio_limit",    double_t,    1, "Max ratio of the detected rectangle sides to consider", 2.0,  1.0, 5.0)

timestamp_image = gen.add_group("TimestampImage")
timestamp_image.add("thresh_a",    double_t,    2, "Threshold of normalized mean timestamp image: f(w) is a*||w||+b", 0.1,  0.0, 100.0)
timestamp_image.add("thresh_b",    double_t,    2, "Threshold of normalized mean timestamp image: f(w) is a*||w||+b", 0.002,  0.0, 1.0)
timestamp_image.add("raw_image_filter",    bool_t,    3, "", True)
timestamp_image.add("morphology_kernel_size_open",    int_t,    3, "", 5,  1, 9)
timestamp_image.add("morphology_kernel_size_close",    int_t,    3, "", 5,  1, 9)
timestamp_image.add("morphology_kernel_size_dilate",    int_t,    3, "", 3,  1, 9)
timestamp_image.add("morphology_opening_iterations",    int_t,    3, "", 1,  0, 9)
timestamp_image.add("morphology_closing_iterations",    int_t,    3, "", 1,  0, 9)
timestamp_image.add("morphology_dilate_iterations",    int_t,    3, "", 1,  0, 9)

optical_flow = gen.add_group("OpticalFlow")
optical_flow.add("window_width", int_t, 4, "", 11, 3, 19)
optical_flow.add("inc_std", double_t, 4, "", 2.5, 0.5, 5.0)
optical_flow.add("median_output_filter_width", int_t, 4, "", 0, 0, 5)
optical_flow.add("mean_output_filter_width", int_t, 4, "", 9, 0, 11)
optical_flow.add("mean_input_filter_width", int_t, 4, "", 5, 0, 11)

cluster = gen.add_group("Cluster")
cluster.add("eps", double_t, 5, "", 7.0, 0.1, 15.0)
cluster.add("weight_pos", double_t, 5, "", 0.2, 0.001, 10.0)
cluster.add("weight_vel", double_t, 5, "", 0.1, 0.001, 10.0)
cluster.add("weight_timestamp", double_t, 5, "", 15.0, 0.001, 100.0)
cluster.add("use_rotated_rect", bool_t, 5, "", True)

potential = gen.add_group("PotentialField")
potential.add("k_repulsive", double_t, 6, "", 4.0, 0.0, 50.0)
potential.add("distance_of_influence", double_t, 6, "", 3.0, 0.0, 10.0)
potential.add("gamma", double_t, 6, "", -1.5, -8.0, -1.0)
potential.add("gamma_a", double_t, 6, "", 2, 0.0, 5.0)
potential.add("gradient_diff", double_t, 6, "", 0.05, 0.01, 1.0)
potential.add("decay_limit", double_t, 6, "", 0.001, 0.0, 1.0)
potential.add("decay_factor", double_t, 6, "", 10.0, 1.0, 100.0)
potential.add("max_correspondence_distance", double_t, 6, "", 0.35, 0.01, 1.0)
potential.add("max_correspondence_distance_init", double_t, 6, "", 0.4, 0.01, 2.0)
potential.add("lamnda_decay", double_t, 6, "", 0.5, 0.1, 0.99)
potential.add("uav_radius", double_t, 6, "", 0.15, 0.05, 0.5)
potential.add("distance_attractive_crossover", double_t, 6, "", 0.2, 0.0, 2.0)
potential.add("max_velocity", double_t, 7, "", 2.0, 0.1, 99.0)

gen.add("move_threshold",    int_t,   8, "", 20,  1, 50000)

exit(gen.generate(PACKAGE, "dynamic_obstacle_detection", "DynamicObstacleDetection"))
